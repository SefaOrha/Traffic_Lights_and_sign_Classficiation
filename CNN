from google.colab import drive 

drive.mount("/content/gdrive")

 #Kütüphaneler eklendi
import numpy as np                              
import matplotlib.pyplot as plt 
import pandas as pd 
from keras.models import Sequential 
from keras.layers import Dense, BatchNormalization, Dropout, Flatten 
from keras.utils.np_utils import to_categorical 
from keras.layers.convolutional import Conv2D, MaxPooling2D
from sklearn.model_selection import train_test_split
import pickle 
from sklearn.model_selection import train_test_split
import cv2
import random

#Google drivedaki dizine girdik
import os
os.chdir("gdrive/MyDrive")

#Dataset içindeki görselleri klasör ismi ile etiketleyip dizine attık.
image_shape=(32,32,3)
path="Dataset/Trafik/Trafik"
images=[]
labels=[]
for class_name in os.listdir(path):
    for image_path in os.listdir(path+"/"+class_name):
         labels.append(int(class_name))
         image=cv2.imread(path+"/"+class_name+"/"+image_path)
         image=cv2.resize(image,(32,32))
         images.append(image)
         
         
         
 #Numpy Dizisine Çevirme ve Encoding İşlemi        
 images=np.array(images)
 labels=np.array(labels)
 labels = to_categorical(labels, 91)
 
 
 
 #Veriyi train validation ve test için ayırdık
 x_train,X_val_test,y_train,Y_val_test=train_test_split(images,labels,test_size=0.3)
 x_val,x_test,y_val,y_test=train_test_split(X_val_test,Y_val_test,test_size=0.5)
 
 
 
 data = pd.read_csv("Dataset/labels.csv", encoding="ISO-8859-1")
 print(data)
 
 #CNN MODELİ
 model=Sequential()
 model.add(Conv2D(64,kernel_size=3,input_shape=image_shape,activation='relu')) 
 model.add(Conv2D(64,kernel_size=3,activation='relu'))
 model.add(MaxPooling2D())
 model.add(Conv2D(128,kernel_size=3,activation='relu'))
 model.add(MaxPooling2D())
 model.add(Flatten())
 model.add(Dense(91,activation='softmax'))
 model.compile(loss='categorical_crossentropy',metrics=['acc'])
 model.summary()
 # MODELİ FİT EDİP 25 EPOCHS DA CALIŞTIRDIK
 model.fit(x_train,y_train,epochs=25,batch_size=32,validation_data=(x_val,y_val))
 model.evaluate(x_test,y_test)
 model.save("Save")
#RASTGELE RESİM GÖNDERDİK
img=random.randrange(100)
pred=model.predict(x_test[img].reshape(1,32,32,3))
plt.imshow(x_test[img])
print(data.query("Classid=="+str(np.argmax(pred))))

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

plt.plot(history.history['acc'])
plt.plot(history.history['val_acc'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
